module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst; 
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
      
  }

  const ADD = 6b000000;
  const SUB = 6b000001;
  const AND = 6b011000;
  const OR = 6b011110;
  const XOR = 6b010110;
  const SAME = 6b011010;
  const SHL = 6b100000;
  const SHR = 6b100001;
  const SRA = 6b100011;
  const CMPEQ = 6b110011;
  const CMPLT = 6b110101;
  const CMPLE = 6b110111;
  const MULT = 6b000010;
  
                   // reset signal
  sig a[8];
  sig b[8];
  sig alufn[6];
  
  
  totaladder adder(.in(io_dip));
  boolean bool(.in(io_dip));
  comparator comp(.io_dip(io_dip),.vin(adder.vout),.nin(adder.nout),.zin(adder.zout));
  bitshift bs(.in(io_dip));
  
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4h3;           // select no digits
    
    a = io_dip[0];
    b = io_dip[1];
    alufn = io_dip[2];
    
    if(ADD==alufn){
      io_led[2] = adder.answer;
      io_led[0]= a;
      io_led[1] = b;
    } else if (SUB==alufn){
      io_led[2] = adder.answer;
      io_led[0]= a;
       io_seg = 8h00;          // turn segments off
    io_sel = 4h0; 
      io_led[1] = b;
    } else if (alufn == AND || alufn == OR || alufn == XOR || alufn == XOR || alufn == SAME){         
      io_led[0]= a;
      io_led[1] = b;
      io_seg = 8h00;          // turn segments off
    io_sel = 4h0; 
      io_led[2] = bool.out;     
  }  else if (alufn == SHL || alufn == SHR || alufn == SRA){                                          
           io_led[2] = bs.out;
      io_led[0]= a;
      io_led[1] = b;
  }
    
    
  else if (alufn == CMPEQ || alufn == CMPLE || alufn == CMPLT){                                       
           io_led[2][0] = comp.comparisonresult;  
      io_led[0]= a;
      io_led[1] = b;   
  }
    
    
  }
}
